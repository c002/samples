#!/opt/bta4/bin/python
#
#       radsrtrsummary()
#
#       1. Summarises a day of adsl_summary by router
#
# 
# 

import os, sys, getopt, time, string
from socket import gethostbyaddr
sys.path.insert(0,'/opt/bta4/lib')
sys.path.insert(0,'/opt/bta4/lib/python2.3')

sys.path.insert(0,'../lib')
#sys.path.append('/export/bta4/portbill3')
sys.path.append('/export/bta4/portbill3/lib')

import cx_Oracle
from Log import Log

os.environ['ORACLE_HOME'] = '/opt/oracle/product/7.3.2'
DatabaseError=cx_Oracle.DatabaseError

class RtrSummary:

    def __init__(self, daystamp, st_epoch, mylog, config=None):

        self.st_epoch=st_epoch
        self.et_epoch=self.st_epoch + 86400
	self.daystamp=daystamp
	self.config=config
        self.mylog=mylog

	self.db=cx_Oracle.connect(self.config.dbstrings['dbOrin'])
	self.cur=self.db.cursor()

	self.rtr_summary()

	self.db.commit()
        self.db.close()

    def rtr_summary(self):

	query="""delete from %s where daystamp=to_date('%s','YYYYMMDD')
	      """ % (self.config.tables['rtrsum'],self.daystamp)
        if self.config.DEBUG>2: print query
        if self.config.INSERT:
            self.cur.execute(query)
            self.db.commit()

	query="""select substr(port, 0,instr(port,'/')-1), connection_type,
		 sum(input_octets), sum(output_octets) from 
	         %s 
		 where
		 connection_type=5 and to_time>=%d and to_time<%d
		 group by substr(port, 0,instr(port,'/')-1), connection_type
	      """ % ( self.config.tables['adslsum'],
			self.st_epoch,
			self.et_epoch)

	if self.config.DEBUG>2: print query
	self.cur.execute(query)
	results=self.cur.fetchall()

	stats={}
   	for res in results:
	    router=res[0]
	    ctype=res[1]
	    if router[:2]=="or":
		router='c'+res[0]
	    elif router[0] in string.digits:
	 	try:
		     router=gethostbyaddr(router)[0]
		except:
		     pass

	    if not stats.has_key(router):
		stats[router]={}
	    if not stats[router].has_key(ctype):
		stats[router][ctype]={}
		stats[router][ctype]['bin']=0
		stats[router][ctype]['bout']=0

	    stats[router][ctype]['bin']=stats[router][ctype]['bin'] + res[2]
	    stats[router][ctype]['bout']=stats[router][ctype]['bout'] + res[3]

        for router in stats.keys():
	    for ctype in stats[router].keys():
	        query="""insert into %s 
		     (DAYSTAMP,ROUTER,CONNECTION_TYPE, INPUT_OCTETS,OUTPUT_OCTETS)
	 	     values
		     ( to_date('%s','YYYYMMDD'), '%s', %d, %d, %d)
		      """ % (self.config.tables['rtrsum'],
			     self.daystamp, 
			     router, 
			     int(ctype), 
			     int(stats[router][ctype]['bin']),
			     int(stats[router][ctype]['bout']))
	
	        if self.config.DEBUG>2: print query
	        self.cur.execute(query)

if __name__=="__main__":

    proc_start=time.time()

    st=time.localtime(time.time())
    st=list(st)
    st[3:]=[0,0,0,0,0,-1]
    
    st_epoch=time.mktime(st) - (86400 * 1)
    st=list(time.localtime(st_epoch))

    try:
        opts,args=getopt.getopt(sys.argv[1:],'hd:c:')
    except:
        sys.stderr.write("Invalid args\n")
        usage()
        sys.exit(-1)

    config=None
    for o,v in opts:
        if o=='-h':
            usage()
            sys.exit(0)
        if o=='-d':
            st[0:3] = [int(v[0:4]) , int(v[4:6]), int(v[6:8]) ]
            st_epoch=time.mktime(st)
        if o=='-c':
            config=v

    day=time.strftime('%Y%m%d',tuple(st))
    et=time.localtime((time.mktime(tuple(st)) + 86400)) 
    et=list(et)
    et[3:]=[0,0,0,0,0,0]

    stime = time.strftime('%d-%b-%Y', tuple(st))
    etime = time.strftime('%d-%b-%Y', tuple(et))

    mylog=Log(4)
    mylog.add(1, "Daily radius router summary\n")
    mylog.add(1, "\tProcessing Day: %s\n"% day)
    mylog.add(1, "\tOptions: %s\n"% opts)

    if config:
        exec("from %s import *" % (config))        # Load the module
    else:
        from OracConfig import *                     # default

    conf=Config()

    summary = RtrSummary(day, st_epoch, mylog, config=conf)

#    db.close()

    mylog.add(1, "(Generated by: radsrtrsummary.py)")
    subject="Radius Router summary Processing for %s" % day
    try:
        mylog.SendMail(conf.SENDTO, conf.SENDFROM, subject)
    except:
        print mylog
    sys.exit(0)
